package pingScan

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"os/exec"
	"strings"
	"sync"
)

func PingScan(ipSeg string) ([]string, error) {
	//pingRet := make(map[string]string)
	pingcmd := "fping -aeg " + ipSeg

	cmd := exec.Command("/bin/bash", "-c", pingcmd)
	stdout, err := cmd.StdoutPipe()
	if err != nil {
		return []string{}, err
	}

	var pingRets []string

	cmd.Start()

	reader := bufio.NewReader(stdout)
	for {
		line, err2 := reader.ReadString('\n')
		if err2 != nil || io.EOF == err2 {
			fmt.Println(ipSeg, err2)
			break
		}
		pingRets = append(pingRets, strings.Split(line, "\n")[0])
	}
	cmd.Wait()
	return pingRets, nil
}

func IPFileScanAlive(filename string) ([]string, error) {
	var workerSlice []string
	var ipSegAlive []string
	worker := make(chan string, 1000)
	goLimit := make(chan struct{}, 5)
	ipAlive := make(chan string, 1000000)

	var wg sync.WaitGroup

	fh, err := os.Open("ips_ret/" + filename)
	if err != nil {
		fmt.Println("open file " + filename + " fail!")
		return []string{}, err
	}

	reader := bufio.NewReader(fh)
	for {
		line, _, err2 := reader.ReadLine()
		if err2 == io.EOF {
			break
		}
		workerSlice = append(workerSlice, string(line))
	}
	//workerSlice = append(workerSlice, string("192.168.10.0/24"))
	//workerSlice = append(workerSlice, string("114.114.114.0/24"))
	//workerSlice = append(workerSlice, string("223.5.5.0/24"))
	wg.Add(1)
	go func(worker chan string) {
		defer wg.Done()
		for _, val := range workerSlice {
			worker <- val
		}
		close(worker)
	}(worker)

	wg.Add(1)
	go func(ipAlive chan string) {
		defer wg.Done()
		var wg2 sync.WaitGroup
		for {
			goLimit <- struct{}{}
			ip, ok := <-worker
			if ok {
				wg2.Add(1)
				go func(ipAlive chan string, _ip string) {
					defer func() {
						defer wg2.Done()
						<-goLimit
					}()
					ipsAlive, _ := PingScan(_ip)
					if len(ipsAlive) != 0 {
						ipAlive <- ip
					} else {
						return
					}
				}(ipAlive, ip)
			} else {
				break
			}
		}
		wg2.Wait()
		close(ipAlive)
	}(ipAlive)

	wg.Wait()

	for {
		if ip, ok := <-ipAlive; ok {
			ipSegAlive = append(ipSegAlive, ip)
		} else {
			break
		}
	}
	return ipSegAlive, nil
}
